// { Driver Code Starts
import java.util.*;
class Node
{
    int data;
    Node next;
    Node(int d) 
    {
        data = d; 
        next = null;
    }
}
	

	
public class LinkedList_Element_From_Last
{
    Node head;  
    Node tail;
    /* Function to print linked list */
    void printList(Node head)
    {
        Node temp = head;
        while (temp != null)
        {
           System.out.print(temp.data+" ");
           temp = temp.next;
        }  
        System.out.println();
    }
	
 
    /* Inserts a new Node at front of the list. */
    public void addToTheLast(Node node) 
	  {
      if (head == null) 
      {
        head = node;
        tail = node;
      } else {
          tail.next = node;
          tail = node;
      }
    }
	  
    public static void main(String args[])
    {
       Scanner sc = new Scanner(System.in);
       int t=sc.nextInt();
		 
		   while(t>0)
       {
          int n = sc.nextInt();
          int k = sc.nextInt();
          LinkedList_Element_From_Last llist = new LinkedList_Element_From_Last();
          //int n=Integer.parseInt(br.readLine());
          int a1=sc.nextInt();
          Node head= new Node(a1);
            llist.addToTheLast(head);
            for (int i = 1; i < n; i++) 
            {
              int a = sc.nextInt(); 
              llist.addToTheLast(new Node(a));
            }
          
        //System.out.println(llist.head.data);
            Solution sol = new Solution(); 
        //System.out.println(k);
        System.out.println(sol.getNthFromLast(llist.head,k));
			  t--;
		  }
	 }
}

class Solution
{
    //Function to find the data of nth node from the end of a linked list.
    int getNthFromLast(Node head, int n)
    {
        //using two pointers, similar to finding middle element.
        Node currNode = head , nthNode = head;
        
        //traversing first n elements with first pointer.
        while(n!=0)
            {
                if(currNode==null)
                    return -1;
                currNode = currNode.next;
                n--;
            }
        //now traversing with both pointers and when first pointer gives null 
        //we have got the nth node from end in second pointer since the first 
        //pointer had already traversed n nodes and thus had difference of n 
        //nodes with second pointer.
        while(currNode!=null)   
            {
                nthNode = nthNode.next;
                currNode = currNode.next;
            }
            
        //returning the data of nth node from end.
        if(nthNode!=null)
            return nthNode.data;
        else
            return -1;
            
    }
}
