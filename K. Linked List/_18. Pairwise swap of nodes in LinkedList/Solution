import java.util.*;
import java.io.*;
import java.lang.*;
  
class Node { 

    int data; 
    Node next; 

    Node(int d) { 
        data = d; 
        next = null; 
    } 
} 

public class LinkedList1
{
    static  Node head;  // head of lisl
    static  Node lastNode;

    /* Inserts a new Node at front of the list. */
    public static void addToTheLast(Node node)
    {

        if (head == null)
        {
            head = node;
            lastNode = node;
        }
        else
        {
            lastNode.next = node;
            lastNode = node;
        }
    }

    static void printList(Node head)
    {
        Node temp = head;
        while (temp != null)
        {
            System.out.print(temp.data+" ");
            temp = temp.next;
        }
        //System.out.println();
    }

    public static void main(String args[]) throws IOException
    {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //out = new PrintWriter(new BufferedOutputStream(System.out));
        int t= Integer.parseInt(br.readLine());
            
        while(t>0)
        {
            int n = Integer.parseInt(br.readLine());
            Node head = null;

            //LinkedList1 llist = new LinkedList1();
                        String str = br.readLine();
                        String nums[] = str.trim().split("\\s+");
            
                int a1= Integer.parseInt(nums[0]);
                head= new Node(a1);
                addToTheLast(head);
            
            for (int i = 1; i < n; i++)
            {
                int a = Integer.parseInt(nums[i]);
                addToTheLast(new Node(a));
            }


            head = new Swap().pairwise_swap(head);
            
            printList(head);
            System.out.println();
            
            t--;
        }
        //out.close();
    }
}

class Swap
{
    //Function to swap elements pairwise.
    public static Node pairwise_swap(Node head)
    {
        if (head== null || head.next == null) { 
            return head; 
        } 
  
        //initializing previous and current pointers.
        Node prev = head; 
        Node curr = head.next; 
  
        head = curr; 
  
        // Traverse the list 
        while (true) {
            
            //creating a next pointer as well.
            Node next = curr.next;
            //updating next of current as prev to swap current and previous node.
            curr.next = prev;
  
            //if next node is NULL or next is the last node, we update the link 
            //part of prev pointer and break from the loop.
            if (next == null || next.next == null) { 
                prev.next = next; 
                break; 
            } 
  
            //changing link part of prev pointer to next node of next pointer. 
            prev.next = next.next; 
  
            //updating prev and curr pointers. 
            prev = next; 
            curr = prev.next; 
        } 
        return head; 
    }    
}
