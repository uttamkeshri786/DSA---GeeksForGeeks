import java.util.*;
class Node {
    int data;
    Node next;
    Node(int d) {
        data = d;
        next = null;
    }
} 

class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while (t-- > 0) {
            int n = sc.nextInt();
            
            int a = sc.nextInt();
            Node head = new Node(a);
            Node tail = head;
            
            for (int i=0; i<n-1; i++)
            {
                a = sc.nextInt();
                tail.next = new Node(a);
                tail = tail.next;
            }
            
            int k = sc.nextInt();
            
            Solution ob = new Solution();
            head = ob.rotate(head,k);
            printList(head);
        }
    }
    
    public static void printList(Node n) {
        while (n != null) {
            System.out.print(n.data + " ");
            n = n.next;
        }
        System.out.println();
    }
}

class Solution {
    //Function to rotate a linked list.
    public Node rotate(Node head, int k)
    {
        if (k == 0) return head;
        
        Node walk = head;
        Node prev = null;
        
        //this loop runs k times and walk pointer moves k nodes ahead 
        //and reaches new head node.
        while( k-->0 && walk!=null )
        {
            prev = walk;
            walk = walk.next;
        }
        //considering cases where k>=n so nothing needs to be done.
        if(walk==null) return head; 
        
        //we store the walk pointer which gives the first node in newHead.
        Node newHead = walk;
        
        //since prev points to the node placed before new head it is new tail
        //or the last node of new list so we store null in it's link part.
        prev.next = null;
        
        //we keep moving the walk pointer till we reach the last node of list.
        while( walk.next != null )
            walk = walk.next;
        
        //connecting last node of old list to old head.
        walk.next = head;
        
        //returning the new list.
        return newHead;
    }
}
