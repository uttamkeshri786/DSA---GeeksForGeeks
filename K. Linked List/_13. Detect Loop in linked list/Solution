import java.util.*;
import java.io.*;
import java.lang.*;

class Node
{
    int data;
    Node next;
    
    Node(int x)
    {
        data = x;
        next = null;
    }
}

class Main
{
    public static void makeLoop(Node head, Node tail, int x){
        if (x == 0) return;
        
        Node curr = head;
        for(int i=1; i<x; i++)
            curr = curr.next;
        
        tail.next = curr;
    }
    
    public static void main (String[] args){
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t--> 0)
        {
            int n = sc.nextInt();
            
            int num = sc.nextInt();
            Node head = new Node(num);
            Node tail = head;
            
            for(int i=0; i<n-1; i++)
            {
                num = sc.nextInt();
                tail.next = new Node(num);
                tail = tail.next;
            }
            
            int pos = sc.nextInt();
            makeLoop(head, tail, pos);
            
            Solution x = new Solution();
            if( x.detectLoop(head) )
                System.out.println("True");
            else
                System.out.println("False");
        }
    }
}

//Method-1: Time complexity: O(n), Auxiliary Space: O(n). 
class Solution {
    
    //Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head)
    {
        HashSet<Node> s = new HashSet<Node>();
        while (head != null) {
            // If we have already has this node
            // in hashmap it means their is a cycle
            // (Because you we encountering the
            // node second time).
            if (s.contains(head))
                return true;

            // If we are seeing the node for
            // the first time, insert it in hash
            s.add(head);

            head = head.next;
        }

        return false;
    }
}



/*
//Method-2: Time complexity: O(n), Auxiliary Space: O(1). 
//This problem can be solved without hashmap by modifying the linked list data structure.

// Java program to detect loop in a linked list

import java.util.*;
class Main{

    // Link list node 
    static class Node 
    {
        int data;
        Node next;
        int flag;
    };

    static Node push(Node head_ref, int new_data)
    {
        // Allocate node 
        Node new_node = new Node();

        // Put in the data 
        new_node.data = new_data;

        new_node.flag = 0;

        // Link the old list off the new node 
        new_node.next = head_ref;

        // Move the head to point to the new node 
        head_ref = new_node;
        return head_ref;
    }

    // Returns true if there is a loop in linked
    // list else returns false.
    static boolean detectLoop(Node h)
    {
        while (h != null)
        {
            // If this node is already traverse
            // it means there is a cycle
            // (Because you we encountering the
            // node for the second time).
            if (h.flag == 1)
                return true;

            // If we are seeing the node for
            // the first time, mark its flag as 1
            h.flag = 1;

            h = h.next;
        }
        return false;
    }

    public static void main(String[] args)
    {
        // Start with the empty list 
        Node head = null;

        head = push(head, 20);
        head = push(head, 4);
        head = push(head, 15);
        head = push(head, 10);

        // Create a loop for testing 
        head.next.next.next.next = head;

        if (detectLoop(head))
            System.out.print("Loop found");
        else
            System.out.print("No Loop");
    }
}
*/
