import java.util.*;

class Node
{
	int data;
	Node next;
	Node prev;
	Node(int data)
	{
	    this.data = data;
	    next = prev = null;
	}
}

class DLinkedList
{
	
	Node newNode(Node head, int data)
	{
		Node n = new Node(data);
		if(head == null)
		{
		    head = n;
		    return head;
		}
		head.next = n;
		n.prev = head;
		head = n;
		return head;
	}
	
	
	void printList(Node node)
	{
		Node temp = node;
		while(temp.next != null)
		{
			temp = temp.next;
		}
		
		while(temp.prev != null)
		{
			temp = temp.prev;
		}
		
		while(temp != null)
		{
			System.out.print(temp.data+" ");
			temp = temp.next;
		}
		System.out.println();
	}
	
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		DLinkedList DLL = new DLinkedList();
		int t = sc.nextInt();
		
		while(t>0)
		{
			Node temp;
			Node head = null;
			Node root = null;
			int n = sc.nextInt();
			for(int i=0;i<n;i++)
			{
				int x = sc.nextInt();
				head = DLL.newNode(head,x);
			    if(root == null)    root = head;
			}
			head = root;
			int pos = sc.nextInt();
			int data = sc.nextInt();
			
		    Solution sol = new Solution();
		    sol.addNode(head,pos,data);
			
			DLL.printList(head);
			while(head.next != null)
			{
				temp = head;
				head = head.next;
			}
		    t--;
		}
	}
}


class Solution
{
    //Function to insert a new node at given position in doubly linked list.
    void addNode(Node head_ref, int pos, int data)
    {
        
		Node temp = head_ref; 
		
		//using a pointer to traverse the linked list till position given.
		while(pos != 0)                 
		{
			temp = temp.next;
			pos--;
		}
		//creating and storing the new node with data in a pointer.
		Node n = new Node(data);

		//if the node next to node at given position is null, we make the next
        //as new node and new node's previous link as this current node.
		if(temp.next == null)
		{
			n.next = null;
			temp.next = n;                
			n.prev = temp;              
		}
		else
		{
		    //storing next node to current node in link part(next) of new node.
			n.next = temp.next;
			
			//storing new node in link part(next) of current node.
			temp.next = n; 
			
			//storing the new node in previous link part(prev) of the node which 
            //was next to current node initially.
			temp.next.prev = n;
			
			//store the current node in previous link part(prev) of new node.
			n.prev = temp;              
			             
		}
		
	}
}
